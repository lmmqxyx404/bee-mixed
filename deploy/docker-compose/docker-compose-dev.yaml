# version: "3"

# 声明一个名为network的networks,subnet为network的子网地址,默认网关是177.7.0.1
networks:
  network:
    ipam:
      driver: default
      config:
        - subnet: '177.7.0.0/16'
        
# 设置mysql，redis持久化保存
volumes:
  mysql:
  redis:

services:
  web:
    image: node:18
    container_name: gva-web
    hostname: gva-web           #可以通过容器名访问
    restart: always
    ports:
      - '8080:8080'
    depends_on:
      - server
    working_dir: /web       # 如果docker 设置了workdir 则此处不需要设置
    #若网络不太好，请自行换源，如下
    #command: bash -c "yarn config set registry https://registry.npm.taobao.org --global && yarn install && yarn serve"
    command: bash -c "yarn install && yarn serve"
    volumes:
      - ../../web:/web
    networks:
      network:
        ipv4_address: 177.7.0.11

  server:
    image: golang:1.22
    container_name: gva-server
    hostname: gva-server
    restart: always
    ports:
      - '8888:8888'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../:/workspace
    working_dir: /workspace/server # 如果docker 设置了workdir 则此处不需要设置
    command: bash -c "go env -w GOPROXY=https://goproxy.cn,direct &&go work sync && go mod tidy && go run main.go"
    links:
      - mysql
      - redis
    networks:
      network:
        ipv4_address: 177.7.0.12

  bee_api_server:
    image: golang:1.22
    container_name: bee_api_server
    hostname: bee_api_server
    restart: always
    ports:
      - '18083:18083'
    # depends_on:
      
    volumes:
      - ../../:/workspace
    working_dir: /workspace/bee-api # 如果docker 设置了workdir 则此处不需要设置
    command: bash -c "go env -w GOPROXY=https://goproxy.cn,direct && go work sync && go mod tidy && go run main.go"
    links:
      - mysql
    networks:
      network:
        ipv4_address: 177.7.0.16

  mysql:
    image: mysql:8.0.21    # 如果您是 arm64 架构：如 MacOS 的 M1，请修改镜像为 image: mysql/mysql-server:8.0.21
#    image: mysql/mysql-server:8.0.21    # 如果您是 arm64 架构：如 MacOS 的 M1，请修改镜像为 image: mysql/mysql-server:8.0.21
    container_name: gva-mysql
    hostname: gva-mysql
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci #设置utf8字符集
    restart: always
    ports:
      - "13306:3306"  # host物理直接映射端口为13306
    environment:
      MYSQL_ROOT_PASSWORD: 'Aa@6447985' # root管理员用户密码
      MYSQL_DATABASE: 'qmPlus' # 初始化启动时要创建的数据库的名称
      MYSQL_USER: 'gva'
      MYSQL_PASSWORD: 'Aa@6447985'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "gva", "-pAa@6447985"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - mysql:/var/lib/mysql
    networks:
      network:
        ipv4_address: 177.7.0.13

  redis:
    image: redis:6.0.6
    container_name: gva-redis # 容器名
    hostname: gva-redis
    restart: always
    ports:
      - '16379:6379'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis:/data
    networks:
      network:
        ipv4_address: 177.7.0.14

  dbcheck:
    image: mysql:8.0.21
    container_name: gva-dbcheck
    # 等待 gva-mysql 通过 healthcheck（如果你改成了 v2.4 并开启了 condition）
    depends_on:
      mysql:
        condition: service_healthy

    # 直接执行一个简单的 SQL，如果能连通且跑通就返回 0
    entrypoint: >
      bash -c "\
        echo '[dbcheck] Testing MySQL reachability...' && \
        mysql -h gva-mysql -u gva -pAa@6447985 -e 'SELECT 1;' && \
        echo '[dbcheck] OK, MySQL is reachable' \
      "

    # 可选：分配到你的自定义 network
    networks:
      network:
        ipv4_address: 177.7.0.15

# 记得把这个 service 当“临时任务”跑完就直接退出，后续你可以：
#   docker-compose up dbcheck
# 看它最后输出和退出码（0 成功 / 非 0 失败）来判断连通性